#include "Common.ssh"
#include "SceneConstants.ssh"
#include "MeshShaderCommon.ssh"
#include "InstanceData.ssh"

struct Constants
{
	uint mVertexBufferDescriptorIndex;
	uint mMeshletBufferDescriptorIndex;
	uint mPrimitiveIndexBufferDescriptorIndex;
	uint mVertexIndexBufferDescriptorIndex;

	uint mBaseInstanceDataOffset;
	uint mInstanceDataByteSize;
	uint mNumInstances;
	uint mInstanceOffset;

	uint mNumMeshlets;
	uint3 pad;
};
ConstantBuffer<Constants> PassConstants : register(b0);

struct PixelShaderInput
{
    float4 mClipPosition : SV_POSITION;
    float3 mViewPosition : View_POSITION;
    float3 mWorldPosition : WORLD_POSITION;
    float3 mPrevWorldPosition : PREV_WORLD_POSITION;
    float3 mNormal : NORMAL0;
    float3 mTangent : TANGENT;
    float3 mBitangent : BITANGENT;
    float2 mUV : UV0;
    nointerpolation uint mMaterialIndex : MATERIAL_INDEX;
};

[outputtopology("triangle")]
[numthreads(SR_MAX_PRIMITIVES,1,1)]
void Main(in uint aGroupId : SV_GroupID, in uint aGroupThreadId : SV_GroupThreadID, out vertices PixelShaderInput aOutVertices[SR_MAX_VERTICES], out indices uint3 aOutIndices[SR_MAX_PRIMITIVES])
{
    const uint meshletIndex = aGroupId / PassConstants.mNumInstances;

    StructuredBuffer<SR_Meshlet> meshlets = GetStructuredBuffer<SR_Meshlet>(PassConstants.mMeshletBufferDescriptorIndex);
    SR_Meshlet meshlet = meshlets[meshletIndex];

    uint startInstance = aGroupId % PassConstants.mNumInstances;
    uint instanceCount = 1;

    uint vertCount = meshlet.mVertexCount * instanceCount;
    uint primCount = meshlet.mPrimitiveCount * instanceCount;
    SetMeshOutputCounts(vertCount, primCount);

    if (aGroupThreadId < vertCount)
    {
        StructuredBuffer<SR_VertexLayout> vertices = GetStructuredBuffer<SR_VertexLayout>(PassConstants.mVertexBufferDescriptorIndex);
        Buffer<uint> vertexIndices = GetBuffer<uint>(PassConstants.mVertexIndexBufferDescriptorIndex);

        uint readIndex = (aGroupThreadId % meshlet.mVertexCount) + meshlet.mVertexOffset;
        uint instanceId = aGroupThreadId / meshlet.mVertexCount;

        uint vertexIndex = vertexIndices[readIndex];
        uint instanceIndex = startInstance + instanceId;

        const SR_VertexLayout vertex = vertices[vertexIndex];
        const SR_InstanceData instanceData = SR_LoadInstanceData(PassConstants.mBaseInstanceDataOffset + (PassConstants.mInstanceDataByteSize * (PassConstants.mInstanceOffset + instanceIndex)));

        float3x3 transform33 = (float3x3)instanceData.mTransform;

        float3 worldPos = mul(instanceData.mTransform, float4(vertex.mPosition, 1.0f)).xyz;
        float3 prevWorldPos = mul(instanceData.mPrevTransform, float4(vertex.mPosition, 1.0f)).xyz;

        PixelShaderInput outVertex = (PixelShaderInput)0;

        outVertex.mWorldPosition = worldPos;
        outVertex.mViewPosition = mul(SR_ViewConstants.mWorldToCamera, float4(worldPos, 1.0f)).xyz;
        outVertex.mClipPosition = mul(SR_ViewConstants.mWorldToClip, float4(worldPos, 1.0f));
        outVertex.mPrevWorldPosition = prevWorldPos;

        outVertex.mNormal = normalize(mul(transform33, vertex.mNormal));
        outVertex.mTangent = normalize(mul(transform33, vertex.mTangent));
        outVertex.mBitangent = normalize(mul(transform33, vertex.mBitangent));

        outVertex.mUV = vertex.mUV;
        outVertex.mMaterialIndex = instanceData.mMaterialIndex;

        aOutVertices[aGroupThreadId] = outVertex;
    }

    if (aGroupThreadId < primCount)
    {
        StructuredBuffer<uint> primitiveIndices = GetStructuredBuffer<uint>(PassConstants.mPrimitiveIndexBufferDescriptorIndex);

        uint readIndex = aGroupThreadId % meshlet.mPrimitiveCount;
        uint instanceId = aGroupThreadId / meshlet.mPrimitiveCount;

        uint packedIndices = primitiveIndices[meshlet.mPrimitiveOffset + readIndex];
        aOutIndices[aGroupThreadId] = UnpackPrimitive(packedIndices) + (meshlet.mVertexCount * instanceId);
    }
}